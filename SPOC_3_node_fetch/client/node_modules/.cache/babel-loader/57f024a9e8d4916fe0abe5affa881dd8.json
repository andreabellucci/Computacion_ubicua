{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Noefu\\\\Desktop\\\\Computacion_ubicua\\\\SPOC_3\\\\client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport { useState, useEffect, useRef } from \"react\";\nimport io from \"socket.io-client\";\nimport React from \"react\"; // COMPONENTS\n\nimport GlobalChat from \"./components/ConnectedUserList\";\nimport ConnectedUserList from \"./components/GlobalChat\";\nimport PrivateChat from \"./components/PrivateChat\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst generator = require('project-name-generator');\n\nfunction App() {\n  _s();\n\n  const [username, setUsername] = useState(null);\n  const [globalChat, setGlobalChat] = useState([]);\n  const [socket, setSocket] = useState(null);\n  /* \r\n  * BLOCK 1\r\n  * Socket EVENT declaration\r\n  */\n\n  useEffect(() => {\n    const socket = io(\"localhost:3001\");\n    socket.on(\"connect\", () => {\n      const newUserName = generator({\n        words: 2,\n        number: false\n      }).dashed;\n      setUsername(newUserName);\n      socket.emit(\"register_user\", newUserName);\n    }); // A new GLOBAL message comes from the server\n\n    socket.on(\"send_public_message\", function (message) {\n      let formattedMessage = buildTextMessage(message);\n      setGlobalChat(formattedMessage);\n    });\n    setSocket(socket);\n  }, []);\n  /* \r\n   * BLOCK 2\r\n   * Application FUNCTIONS\r\n  */\n\n  function sendPublicMessage() {\n    // Extract the message from the box and clear it\n    let message = document.getElementById(\"input_message\").value;\n\n    if (message != \"\") {\n      document.getElementById(\"input_message\").value = \"\";\n      let newGlobalMessage = {\n        from: username,\n        text: message,\n        datetime: new Date().toLocaleString()\n      };\n      socket.emit(\"broadcast_public_message\", newGlobalMessage);\n    }\n  }\n  /* \r\n   * BLOCK 3\r\n   * Auxiliar FUNCTIONS\r\n  */\n\n\n  function buildTextMessage(message) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: username == message.from ? 'my_text_message' : 'ur_text_message',\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text_message_header\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text_message_username\",\n          children: message.from\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text_messagen_datetime\",\n          children: message.datetime\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text_message_content\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: message.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 47\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  } // Here we build the entire app\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      id: \"header_div\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"https://logodix.com/logo/1229689.png\",\n        alt: \"messenger butterfly icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat_container\",\n      children: globalChat\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      id: \"footer_div\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"input_message\",\n        placeholder: \"message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        onClick: sendPublicMessage,\n        id: \"input_submit\",\n        value: \"\\u27A4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"z9bMkZZy3xOPprqXf5MoYrk95vw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Noefu/Desktop/Computacion_ubicua/SPOC_3/client/src/App.js"],"names":["useState","useEffect","useRef","io","React","GlobalChat","ConnectedUserList","PrivateChat","generator","require","App","username","setUsername","globalChat","setGlobalChat","socket","setSocket","on","newUserName","words","number","dashed","emit","message","formattedMessage","buildTextMessage","sendPublicMessage","document","getElementById","value","newGlobalMessage","from","text","datetime","Date","toLocaleString"],"mappings":"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","sourcesContent":["import \"./App.css\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport React from \"react\";\r\n\r\n\r\n// COMPONENTS\r\nimport GlobalChat from \"./components/ConnectedUserList\";\r\nimport ConnectedUserList from \"./components/GlobalChat\";\r\nimport PrivateChat from \"./components/PrivateChat\";\r\n\r\nconst generator = require('project-name-generator');\r\n\r\nfunction App() {\r\n  const [username, setUsername] = useState(null);\r\n  const [globalChat, setGlobalChat] = useState([]);\r\n  const [socket, setSocket] = useState(null);\r\n\r\n  /* \r\n  * BLOCK 1\r\n  * Socket EVENT declaration\r\n  */\r\n  useEffect(() => {\r\n    const socket = io(\"localhost:3001\");\r\n\r\n    socket.on(\"connect\", () => {\r\n      const newUserName = generator({ words: 2, number: false }).dashed;\r\n      setUsername(newUserName);\r\n      socket.emit(\"register_user\", newUserName);\r\n    });\r\n\r\n    // A new GLOBAL message comes from the server\r\n    socket.on(\"send_public_message\", function (message) {\r\n      let formattedMessage = buildTextMessage(message);\r\n      setGlobalChat(formattedMessage);\r\n    });\r\n\r\n    setSocket(socket);\r\n  }, []);\r\n\r\n  /* \r\n   * BLOCK 2\r\n   * Application FUNCTIONS\r\n  */\r\n  function sendPublicMessage() {\r\n    // Extract the message from the box and clear it\r\n    let message = document.getElementById(\"input_message\").value;\r\n    if (message != \"\") {\r\n      document.getElementById(\"input_message\").value = \"\";\r\n      let newGlobalMessage = { from: username, text: message, datetime: new Date().toLocaleString() };\r\n      socket.emit(\"broadcast_public_message\", newGlobalMessage);\r\n    }\r\n  }\r\n\r\n  /* \r\n   * BLOCK 3\r\n   * Auxiliar FUNCTIONS\r\n  */\r\n  function buildTextMessage(message) {\r\n    return (\r\n      <div className={username == message.from ? 'my_text_message' : 'ur_text_message'}>\r\n        <div className=\"text_message_header\">\r\n          <p className=\"text_message_username\">{message.from}</p>\r\n          <p className=\"text_messagen_datetime\">{message.datetime}</p>\r\n        </div>\r\n        <div className=\"text_message_content\"><p>{message.text}</p></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Here we build the entire app\r\n  return (\r\n    <div>\r\n      <header id=\"header_div\">\r\n        <img src=\"https://logodix.com/logo/1229689.png\" alt=\"messenger butterfly icon\" />\r\n        <div>\r\n          <p>{username}</p>\r\n        </div>\r\n      </header>\r\n\r\n      <div id=\"chat_container\">{globalChat}</div>\r\n\r\n      <footer id=\"footer_div\">\r\n        <input type=\"text\" id=\"input_message\" placeholder=\"message...\" />\r\n        <input type=\"submit\" onClick={sendPublicMessage} id=\"input_submit\" value=\"&#10148;\" />\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}