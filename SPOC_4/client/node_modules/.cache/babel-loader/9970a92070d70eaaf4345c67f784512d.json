{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Noefu\\\\Desktop\\\\Computacion_ubicua\\\\SPOC_3\\\\client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport { useState, useEffect, useRef } from \"react\";\nimport io from \"socket.io-client\";\nimport React from \"react\"; // COMPONENTS\n\nimport ConnectedUserList from \"./components/ConnectedUserList\";\nimport GlobalChat from \"./components/GlobalChat\";\nimport PrivateChat from \"./components/PrivateChat\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst generator = require('project-name-generator');\n\nfunction App() {\n  _s();\n\n  const [socket, setSocket] = useState(null);\n  const [username, setUsername] = useState(\"\");\n  const [publicMessageStack, setPublicMessageStack] = useState([]);\n  const [privateMessageStack, setPrivateMessageStack] = useState([]);\n  const [connectedUserList, setconnectedUserList] = useState([]);\n  const [currentView, setCurrentView] = useState(\"global\"); // global, private, users\n\n  const [currentPrivateChat, setCurrentPrivateChat] = useState(\"\"); // Who youre talking in private at the moment\n\n  const [newMessage, setNewMessage] = useState(\"\");\n  /* \r\n  * BLOCK 1\r\n  * Socket EVENT declaration\r\n  */\n\n  useEffect(() => {\n    const socket = io(\"localhost:3001\"); // When the socket connects to the server\n\n    socket.on(\"connect\", () => {\n      const newUserName = generator({\n        words: 2,\n        number: false\n      }).dashed;\n      setUsername(newUserName);\n      socket.emit(\"register_user\", newUserName);\n    }); // A new GLOBAL message comes from the server\n\n    socket.on(\"deliver_public_message\", message => {\n      setPublicMessageStack(prevMessageStack => [...prevMessageStack, message]);\n    }); // A new GLOBAL message comes from the server\n\n    socket.on(\"deliver_private_message\", message => {\n      setPrivateMessageStack(prevMessageStack => [...prevMessageStack, message]);\n    });\n    setSocket(socket);\n  }, []);\n  /* \r\n   * BLOCK 2\r\n   * Application FUNCTIONS\r\n  */\n\n  function sendPublicMessage() {\n    // Extract the message from the box and clear it\n    if (newMessage != \"\") {\n      let newGlobalMessage = {\n        from: username,\n        text: newMessage,\n        datetime: new Date().toLocaleString()\n      };\n      socket.emit(\"broadcast_public_message\", newGlobalMessage);\n      document.getElementById(\"input_message\").value = \"\";\n      setNewMessage(\"\");\n    }\n  }\n\n  function handleOnInput(e) {\n    setNewMessage(e.target.value);\n  } // Here we build the entire app\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      id: \"header_div\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"https://logodix.com/logo/1229689.png\",\n        alt: \"messenger butterfly icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [currentView == \"global\" && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Global Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this), currentView == \"users\" && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Conn. User List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), currentView == \"private\" && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Prv: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), currentView == \"global\" && /*#__PURE__*/_jsxDEV(GlobalChat, {\n      messageList: publicMessageStack,\n      username: username\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this), currentView == \"users\" && /*#__PURE__*/_jsxDEV(ConnectedUserList, {\n      userList: connectedUserList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this), currentView == \"private\" && /*#__PURE__*/_jsxDEV(PrivateChat, {\n      messageList: privateMessageStack\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this), (currentView == \"global\" || currentView == \"private\") && /*#__PURE__*/_jsxDEV(\"footer\", {\n      id: \"footer_div\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onInput: handleOnInput,\n        type: \"text\",\n        id: \"input_message\",\n        placeholder: \"message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        onClick: sendPublicMessage,\n        id: \"input_submit\",\n        value: \"\\u27A4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Zc3FOLvtZP/YNI3DfK5XJCKUJVc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Noefu/Desktop/Computacion_ubicua/SPOC_3/client/src/App.js"],"names":["useState","useEffect","useRef","io","React","ConnectedUserList","GlobalChat","PrivateChat","generator","require","App","socket","setSocket","username","setUsername","publicMessageStack","setPublicMessageStack","privateMessageStack","setPrivateMessageStack","connectedUserList","setconnectedUserList","currentView","setCurrentView","currentPrivateChat","setCurrentPrivateChat","newMessage","setNewMessage","on","newUserName","words","number","dashed","emit","message","prevMessageStack","sendPublicMessage","newGlobalMessage","from","text","datetime","Date","toLocaleString","document","getElementById","value","handleOnInput","e","target"],"mappings":"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","sourcesContent":["import \"./App.css\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport React from \"react\";\r\n\r\n\r\n// COMPONENTS\r\nimport ConnectedUserList from \"./components/ConnectedUserList\";\r\nimport GlobalChat from \"./components/GlobalChat\";\r\nimport PrivateChat from \"./components/PrivateChat\";\r\n\r\nconst generator = require('project-name-generator');\r\n\r\nfunction App() {\r\n  const [socket, setSocket] = useState(null);\r\n  const [username, setUsername] = useState(\"\");\r\n  const [publicMessageStack, setPublicMessageStack] = useState([]);\r\n  const [privateMessageStack, setPrivateMessageStack] = useState([]);\r\n  const [connectedUserList, setconnectedUserList] = useState([]);\r\n  const [currentView, setCurrentView] = useState(\"global\"); // global, private, users\r\n  const [currentPrivateChat, setCurrentPrivateChat] = useState(\"\"); // Who youre talking in private at the moment\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n\r\n\r\n  /* \r\n  * BLOCK 1\r\n  * Socket EVENT declaration\r\n  */\r\n  useEffect(() => {\r\n    const socket = io(\"localhost:3001\");\r\n\r\n    // When the socket connects to the server\r\n    socket.on(\"connect\", () => {\r\n      const newUserName = generator({ words: 2, number: false }).dashed;\r\n      setUsername(newUserName);\r\n      socket.emit(\"register_user\", newUserName);\r\n    });\r\n\r\n    // A new GLOBAL message comes from the server\r\n    socket.on(\"deliver_public_message\", (message) => {\r\n      setPublicMessageStack((prevMessageStack) => [...prevMessageStack, message]);\r\n    });\r\n\r\n    // A new GLOBAL message comes from the server\r\n    socket.on(\"deliver_private_message\", (message) => {\r\n      setPrivateMessageStack((prevMessageStack) => [...prevMessageStack, message]);\r\n    });\r\n\r\n    setSocket(socket);\r\n  }, []);\r\n\r\n  /* \r\n   * BLOCK 2\r\n   * Application FUNCTIONS\r\n  */\r\n  function sendPublicMessage() {\r\n    // Extract the message from the box and clear it\r\n    if (newMessage != \"\") {\r\n      let newGlobalMessage = { from: username, text: newMessage, datetime: new Date().toLocaleString() };\r\n      socket.emit(\"broadcast_public_message\", newGlobalMessage);\r\n      document.getElementById(\"input_message\").value = \"\";\r\n      setNewMessage(\"\");\r\n    }\r\n  }\r\n\r\n  function handleOnInput(e) {\r\n    setNewMessage(e.target.value);\r\n  }\r\n\r\n  // Here we build the entire app\r\n  return (\r\n    <div>\r\n      <header id=\"header_div\">\r\n        <img src=\"https://logodix.com/logo/1229689.png\" alt=\"messenger butterfly icon\" />\r\n        <div>\r\n          {currentView == \"global\" &&\r\n            <p>Global Chat</p>\r\n          }\r\n          {currentView == \"users\" &&\r\n            <p>Conn. User List</p>\r\n          }\r\n          {currentView == \"private\" &&\r\n            <p>Prv: { }</p>\r\n          }\r\n        </div>\r\n      </header>\r\n\r\n      {currentView == \"global\" &&\r\n        <GlobalChat messageList={publicMessageStack} username={username} />\r\n      }\r\n      {currentView == \"users\" &&\r\n        <ConnectedUserList userList={connectedUserList} />\r\n      }\r\n      {currentView == \"private\" &&\r\n        <PrivateChat messageList={privateMessageStack} />\r\n      }\r\n\r\n      {(currentView == \"global\" || currentView == \"private\") &&\r\n        <footer id=\"footer_div\">\r\n          <input onInput={handleOnInput} type=\"text\" id=\"input_message\" placeholder=\"message...\" />\r\n          <input type=\"submit\" onClick={sendPublicMessage} id=\"input_submit\" value=\"&#10148;\" />\r\n        </footer>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}