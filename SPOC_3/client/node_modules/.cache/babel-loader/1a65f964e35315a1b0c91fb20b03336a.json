{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Noefu\\\\Desktop\\\\asignaturas\\\\ub\\xEDcua\\\\labs y practicas\\\\Computacion_ubicua\\\\SPOC_3\\\\client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport { useState, useEffect, useRef } from \"react\";\nimport io from \"socket.io-client\";\nimport React from \"react\"; // COMPONENTS\n\nimport { Context } from \"./components/Context\";\nimport Header from \"./components/Header\";\nimport ConnectedUserList from \"./components/ConnectedUserList\";\nimport GlobalChat from \"./components/GlobalChat\";\nimport PrivateChat from \"./components/PrivateChat\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst generator = require('project-name-generator');\n\nfunction App() {\n  _s();\n\n  const [socket, setSocket] = useState(null);\n  const [username, setUsername] = useState(\"\");\n  const [publicMessageStack, setPublicMessageStack] = useState([]);\n  const [privateMessageStack, setPrivateMessageStack] = useState([]);\n  const [connectedUserList, setConnectedUserList] = useState([]);\n  const [currentView, setCurrentView] = useState(\"global\"); // global, private, users\n\n  const [currentPrivateChat, setCurrentPrivateChat] = useState(\"\"); // Who you're talking in private at the moment\n\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [challenge, setChallenge] = useState(null);\n  /* \r\n  * BLOCK 1\r\n  * Socket EVENT declaration\r\n  */\n\n  useEffect(() => {\n    const socket = io(\"localhost:3001\"); // When the socket connects to the server\n\n    socket.on(\"connect\", () => {\n      const newUserName = generator({\n        words: 2,\n        number: false\n      }).dashed;\n      setUsername(newUserName);\n      socket.emit(\"register_user\", newUserName);\n    }); // A new GLOBAL message comes from the server\n\n    socket.on(\"deliver_public_message\", message => {\n      setPublicMessageStack(prevMessageStack => [...prevMessageStack, message]);\n    }); // A new PRIVATE message comes from the server\n\n    socket.on(\"deliver_private_message\", message => {\n      console.log(\"new message!!!!!\");\n      console.log(message);\n      setPrivateMessageStack(prevMessageStack => [...prevMessageStack, message]);\n    }); // The updated user connected list arrives\n\n    socket.on(\"update_connected_users_list\", userList => {\n      setConnectedUserList(userList);\n    }); // The server challenge us\n\n    socket.on(\"server_challenge\", challenge => {\n      setChallenge(challenge);\n    }); // The server force-disconnect us\n\n    socket.on(\"disconnect_user\", () => {\n      socket.disconnect();\n    });\n    setSocket(socket);\n  }, []);\n  /* \r\n   * BLOCK 2\r\n   * Application FUNCTIONS\r\n  */\n\n  function sendPublicMessage() {\n    // Extract the message from the box and clear it\n    if (newMessage !== \"\") {\n      let newGlobalMessage = {\n        from: username,\n        text: newMessage,\n        datetime: new Date().toLocaleString()\n      };\n      socket.emit(\"broadcast_public_message\", newGlobalMessage);\n      document.getElementById(\"input_message\").value = \"\";\n      setNewMessage(\"\");\n    }\n  }\n\n  function sendPrivateMessage() {\n    // Extract the message from the box and clear it\n    if (newMessage !== \"\") {\n      let newPrivateMessage = {\n        from: username,\n        to: currentPrivateChat,\n        text: newMessage,\n        datetime: new Date().toLocaleString()\n      };\n      socket.emit(\"send_private_message\", newPrivateMessage);\n      setPrivateMessageStack(prevMessageStack => [...prevMessageStack, newPrivateMessage]);\n      document.getElementById(\"input_message\").value = \"\";\n      setNewMessage(\"\");\n    }\n  }\n\n  function handleOnInput(e) {\n    setNewMessage(e.target.value);\n  }\n\n  function sendChallengeAnswer(answer) {\n    socket.emit(\"user_send_response\", answer);\n    setChallenge(null);\n  } // Here we build the entire app\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [challenge && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"challenge\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: challenge.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"challenge_answers\",\n        children: challenge.answers.map((val, key) => {\n          return /*#__PURE__*/_jsxDEV(\"p\", {\n            onClick: () => sendChallengeAnswer(val),\n            children: val\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 22\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Context.Provider, {\n      value: {\n        value1: [socket, setSocket],\n        value2: [username, setUsername],\n        value3: [publicMessageStack, setPublicMessageStack],\n        value4: [privateMessageStack, setPrivateMessageStack],\n        value5: [connectedUserList, setConnectedUserList],\n        value6: [currentView, setCurrentView],\n        value7: [currentPrivateChat, setCurrentPrivateChat],\n        value8: [],\n        value9: []\n      },\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        currentPrivateChat: currentPrivateChat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GlobalChat, {\n        messageList: publicMessageStack,\n        username: username,\n        currentView: currentView\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ConnectedUserList, {\n        username: username,\n        connectedUserList: connectedUserList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PrivateChat, {\n        messageList: privateMessageStack,\n        currentChat: currentPrivateChat,\n        username: username,\n        currentView: currentView\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), (currentView === \"global\" || currentView === \"private\") && /*#__PURE__*/_jsxDEV(\"footer\", {\n      id: \"footer_div\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onInput: handleOnInput,\n        type: \"text\",\n        id: \"input_message\",\n        placeholder: \"message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this), currentView === \"global\" && /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        onClick: sendPublicMessage,\n        id: \"input_submit\",\n        value: \"\\u27A4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }, this), currentView === \"private\" && /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        onClick: sendPrivateMessage,\n        id: \"input_submit\",\n        value: \"\\u27A4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"dmx0BR5ny23+ffZncek73hMW7rQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Noefu/Desktop/asignaturas/ub√≠cua/labs y practicas/Computacion_ubicua/SPOC_3/client/src/App.js"],"names":["useState","useEffect","useRef","io","React","Context","Header","ConnectedUserList","GlobalChat","PrivateChat","generator","require","App","socket","setSocket","username","setUsername","publicMessageStack","setPublicMessageStack","privateMessageStack","setPrivateMessageStack","connectedUserList","setConnectedUserList","currentView","setCurrentView","currentPrivateChat","setCurrentPrivateChat","newMessage","setNewMessage","challenge","setChallenge","on","newUserName","words","number","dashed","emit","message","prevMessageStack","console","log","userList","disconnect","sendPublicMessage","newGlobalMessage","from","text","datetime","Date","toLocaleString","document","getElementById","value","sendPrivateMessage","newPrivateMessage","to","handleOnInput","e","target","sendChallengeAnswer","answer","question","answers","map","val","key","value1","value2","value3","value4","value5","value6","value7","value8","value9"],"mappings":"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","sourcesContent":["import \"./App.css\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport React from \"react\";\r\n\r\n\r\n// COMPONENTS\r\nimport { Context } from \"./components/Context\";\r\nimport Header from \"./components/Header\";\r\nimport ConnectedUserList from \"./components/ConnectedUserList\";\r\nimport GlobalChat from \"./components/GlobalChat\";\r\nimport PrivateChat from \"./components/PrivateChat\";\r\n\r\nconst generator = require('project-name-generator');\r\n\r\nfunction App() {\r\n  const [socket, setSocket] = useState(null);\r\n  const [username, setUsername] = useState(\"\");\r\n  const [publicMessageStack, setPublicMessageStack] = useState([]);\r\n  const [privateMessageStack, setPrivateMessageStack] = useState([]);\r\n  const [connectedUserList, setConnectedUserList] = useState([]);\r\n  const [currentView, setCurrentView] = useState(\"global\"); // global, private, users\r\n  const [currentPrivateChat, setCurrentPrivateChat] = useState(\"\"); // Who you're talking in private at the moment\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [challenge, setChallenge] = useState(null);\r\n\r\n\r\n  /* \r\n  * BLOCK 1\r\n  * Socket EVENT declaration\r\n  */\r\n  useEffect(() => {\r\n    const socket = io(\"localhost:3001\");\r\n\r\n    // When the socket connects to the server\r\n    socket.on(\"connect\", () => {\r\n      const newUserName = generator({ words: 2, number: false }).dashed;\r\n      setUsername(newUserName);\r\n      socket.emit(\"register_user\", newUserName);\r\n    });\r\n\r\n    // A new GLOBAL message comes from the server\r\n    socket.on(\"deliver_public_message\", (message) => {\r\n      setPublicMessageStack((prevMessageStack) => [...prevMessageStack, message]);\r\n    });\r\n\r\n    // A new PRIVATE message comes from the server\r\n    socket.on(\"deliver_private_message\", (message) => {\r\n      console.log(\"new message!!!!!\");\r\n      console.log(message);\r\n      setPrivateMessageStack((prevMessageStack) => [...prevMessageStack, message]);\r\n    });\r\n\r\n    // The updated user connected list arrives\r\n    socket.on(\"update_connected_users_list\", (userList) => {\r\n      setConnectedUserList(userList);\r\n    });\r\n\r\n    // The server challenge us\r\n    socket.on(\"server_challenge\", (challenge) => {\r\n      setChallenge(challenge);\r\n    });\r\n\r\n    // The server force-disconnect us\r\n    socket.on(\"disconnect_user\", () => {\r\n      socket.disconnect();\r\n    });\r\n\r\n    setSocket(socket);\r\n  }, []);\r\n\r\n  /* \r\n   * BLOCK 2\r\n   * Application FUNCTIONS\r\n  */\r\n  function sendPublicMessage() {\r\n    // Extract the message from the box and clear it\r\n    if (newMessage !== \"\") {\r\n      let newGlobalMessage = { from: username, text: newMessage, datetime: new Date().toLocaleString() };\r\n      socket.emit(\"broadcast_public_message\", newGlobalMessage);\r\n      document.getElementById(\"input_message\").value = \"\";\r\n      setNewMessage(\"\");\r\n    }\r\n  }\r\n\r\n  function sendPrivateMessage() {\r\n    // Extract the message from the box and clear it\r\n    if (newMessage !== \"\") {\r\n      let newPrivateMessage = { from: username, to: currentPrivateChat, text: newMessage, datetime: new Date().toLocaleString() };\r\n      socket.emit(\"send_private_message\", newPrivateMessage);\r\n      setPrivateMessageStack((prevMessageStack) => [...prevMessageStack, newPrivateMessage]);\r\n      document.getElementById(\"input_message\").value = \"\";\r\n      setNewMessage(\"\");\r\n    }\r\n  }\r\n\r\n  function handleOnInput(e) {\r\n    setNewMessage(e.target.value);\r\n  }\r\n\r\n  function sendChallengeAnswer(answer) {\r\n    socket.emit(\"user_send_response\", answer);\r\n    setChallenge(null);\r\n  }\r\n\r\n\r\n  // Here we build the entire app\r\n  return (\r\n    <div>\r\n\r\n      {challenge &&\r\n        <div id=\"challenge\">\r\n          <h2>{challenge.question}</h2>\r\n          <div id=\"challenge_answers\">\r\n            {challenge.answers.map((val, key) => {\r\n              return <p onClick={() => sendChallengeAnswer(val)} key={key}>{val}</p>;\r\n            })}\r\n          </div>\r\n        </div>\r\n      }\r\n      <Context.Provider value={{ value1: [socket, setSocket], value2: [username, setUsername], value3: [publicMessageStack, setPublicMessageStack], value4: [privateMessageStack, setPrivateMessageStack], value5: [connectedUserList, setConnectedUserList], value6: [currentView, setCurrentView], value7: [currentPrivateChat, setCurrentPrivateChat], value8: [], value9: [] }}>\r\n        <Header currentPrivateChat={currentPrivateChat} />\r\n        <GlobalChat messageList={publicMessageStack} username={username} currentView={currentView} />\r\n        <ConnectedUserList username={username} connectedUserList={connectedUserList} />\r\n        <PrivateChat messageList={privateMessageStack} currentChat={currentPrivateChat} username={username} currentView={currentView} />\r\n      </Context.Provider>\r\n\r\n\r\n      {\r\n        (currentView === \"global\" || currentView === \"private\") &&\r\n        <footer id=\"footer_div\">\r\n          <input onInput={handleOnInput} type=\"text\" id=\"input_message\" placeholder=\"message...\" />\r\n          {currentView === \"global\" &&\r\n            <input type=\"submit\" onClick={sendPublicMessage} id=\"input_submit\" value=\"&#10148;\" />\r\n          }\r\n          {currentView === \"private\" &&\r\n            <input type=\"submit\" onClick={sendPrivateMessage} id=\"input_submit\" value=\"&#10148;\" />\r\n          }\r\n        </footer>\r\n      }\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}