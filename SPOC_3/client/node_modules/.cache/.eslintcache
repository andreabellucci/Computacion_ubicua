[{"C:\\Users\\Noefu\\Desktop\\Computacion_ubicua\\SPOC_3\\client\\src\\index.js":"1","C:\\Users\\Noefu\\Desktop\\Computacion_ubicua\\SPOC_3\\client\\src\\reportWebVitals.js":"2","C:\\Users\\Noefu\\Desktop\\Computacion_ubicua\\SPOC_3\\client\\src\\App.js":"3","C:\\Users\\Noefu\\Desktop\\Computacion_ubicua\\SPOC_3\\client\\src\\components\\PrivateChat.js":"4","C:\\Users\\Noefu\\Desktop\\Computacion_ubicua\\SPOC_3\\client\\src\\components\\ConnectedUserList.js":"5","C:\\Users\\Noefu\\Desktop\\Computacion_ubicua\\SPOC_3\\client\\src\\components\\GlobalChat.js":"6"},{"size":517,"mtime":1636714255727,"results":"7","hashOfConfig":"8"},{"size":375,"mtime":1636714255728,"results":"9","hashOfConfig":"8"},{"size":5977,"mtime":1636898106635,"results":"10","hashOfConfig":"8"},{"size":1292,"mtime":1636897790832,"results":"11","hashOfConfig":"8"},{"size":656,"mtime":1636896632805,"results":"12","hashOfConfig":"8"},{"size":698,"mtime":1636812808445,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1z0hqw",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Users\\Noefu\\Desktop\\Computacion_ubicua\\SPOC_3\\client\\src\\index.js",[],["29","30"],"C:\\Users\\Noefu\\Desktop\\Computacion_ubicua\\SPOC_3\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Noefu\\Desktop\\Computacion_ubicua\\SPOC_3\\client\\src\\App.js",["31","32","33","34"],"import \"./App.css\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport React from \"react\";\r\n\r\n\r\n// COMPONENTS\r\nimport ConnectedUserList from \"./components/ConnectedUserList\";\r\nimport GlobalChat from \"./components/GlobalChat\";\r\nimport PrivateChat from \"./components/PrivateChat\";\r\n\r\nconst generator = require('project-name-generator');\r\n\r\nfunction App() {\r\n  const [socket, setSocket] = useState(null);\r\n  const [username, setUsername] = useState(\"\");\r\n  const [publicMessageStack, setPublicMessageStack] = useState([]);\r\n  const [privateMessageStack, setPrivateMessageStack] = useState([]);\r\n  const [connectedUserList, setConnectedUserList] = useState([]);\r\n  const [currentView, setCurrentView] = useState(\"global\"); // global, private, users\r\n  const [currentPrivateChat, setCurrentPrivateChat] = useState(\"\"); // Who you're talking in private at the moment\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n\r\n\r\n  /* \r\n  * BLOCK 1\r\n  * Socket EVENT declaration\r\n  */\r\n  useEffect(() => {\r\n    const socket = io(\"localhost:3001\");\r\n\r\n    // When the socket connects to the server\r\n    socket.on(\"connect\", () => {\r\n      const newUserName = generator({ words: 2, number: false }).dashed;\r\n      setUsername(newUserName);\r\n      socket.emit(\"register_user\", newUserName);\r\n    });\r\n\r\n    // A new GLOBAL message comes from the server\r\n    socket.on(\"deliver_public_message\", (message) => {\r\n      setPublicMessageStack((prevMessageStack) => [...prevMessageStack, message]);\r\n    });\r\n\r\n    // A new GLOBAL message comes from the server\r\n    socket.on(\"deliver_private_message\", (message) => {\r\n      console.log(\"new message!!!!!\");\r\n      console.log(message);\r\n      setPrivateMessageStack((prevMessageStack) => [...prevMessageStack, message]);\r\n    });\r\n\r\n    // A new GLOBAL message comes from the server\r\n    socket.on(\"update_connected_users_list\", (userList) => {\r\n      setConnectedUserList(userList);\r\n    });\r\n\r\n    setSocket(socket);\r\n  }, []);\r\n\r\n  /* \r\n   * BLOCK 2\r\n   * Application FUNCTIONS\r\n  */\r\n  function sendPublicMessage() {\r\n    // Extract the message from the box and clear it\r\n    if (newMessage !== \"\") {\r\n      let newGlobalMessage = { from: username, text: newMessage, datetime: new Date().toLocaleString() };\r\n      socket.emit(\"broadcast_public_message\", newGlobalMessage);\r\n      document.getElementById(\"input_message\").value = \"\";\r\n      setNewMessage(\"\");\r\n    }\r\n  }\r\n\r\n  function sendPrivateMessage() {\r\n    // Extract the message from the box and clear it\r\n    if (newMessage !== \"\") {\r\n      let newPrivateMessage = { from: username, to: currentPrivateChat, text: newMessage, datetime: new Date().toLocaleString() };\r\n      socket.emit(\"send_private_message\", newPrivateMessage);\r\n      setPrivateMessageStack((prevMessageStack) => [...prevMessageStack, newPrivateMessage]);\r\n      document.getElementById(\"input_message\").value = \"\";\r\n      setNewMessage(\"\");\r\n    }\r\n  }\r\n\r\n  function handleOnInput(e) {\r\n    setNewMessage(e.target.value);\r\n  }\r\n\r\n  function changeAppView(view) {\r\n    setCurrentView(view);\r\n  }\r\n\r\n  function changePrivateChat(user) {\r\n    setCurrentPrivateChat(user);\r\n    setCurrentView(\"private\");\r\n  }\r\n\r\n  // Here we build the entire app\r\n  return (\r\n    <div>\r\n      <header id=\"header_div\">\r\n        <div>\r\n          <img src=\"https://logodix.com/logo/1229689.png\" alt=\"msn butterfly icon\" />\r\n          <div>\r\n            {currentView === \"global\" &&\r\n              <p>Global Chat</p>\r\n            }\r\n            {currentView === \"users\" &&\r\n              <p>User List</p>\r\n            }\r\n            {currentView === \"private\" &&\r\n              <p>{currentPrivateChat}</p>\r\n            }\r\n          </div>\r\n        </div>\r\n        <div id=\"header_redirection\">\r\n          <img onClick={() => changeAppView(\"global\")} src=\"https://cdn-icons-png.flaticon.com/512/139/139706.png\" alt=\"GlobalChat\" />\r\n          <img onClick={() => changeAppView(\"users\")} src=\"https://cdn-icons-png.flaticon.com/512/3135/3135715.png\" alt=\"UserList\" />\r\n          <img onClick={() => changeAppView(\"private\")} src=\"https://cdn-icons-png.flaticon.com/512/1041/1041916.png\" alt=\"PrivateChat\" />\r\n        </div>\r\n      </header>\r\n\r\n      {currentView === \"global\" &&\r\n        <GlobalChat messageList={publicMessageStack} username={username} />\r\n      }\r\n      {currentView === \"users\" &&\r\n        // <ConnectedUserList usersList={connectedUserList} />\r\n        <div>\r\n          <div id=\"connected_users\">\r\n            {connectedUserList.map((val, key) => {\r\n              if (username != val.username) {\r\n                return (\r\n                  <div key={key} className=\"connected_user_container\" onClick={() => changePrivateChat(val.username)}>\r\n                    <img\r\n                      src=\"https://img.utdstc.com/icon/9a8/867/9a8867eb77f8a20e62b5ea69f900de7c650546db544a00ce042d66945fd987bb:200\"\r\n                      alt=\"messenger butterfly icon\" />\r\n                    <div>\r\n                      <p>{val.username}</p>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              } else\r\n                return;\r\n            })}\r\n          </div>\r\n        </div>\r\n      }\r\n      {\r\n        currentView === \"private\" &&\r\n        <PrivateChat messageList={privateMessageStack} currentChat={currentPrivateChat} username={username} />\r\n      }\r\n\r\n      {\r\n        (currentView === \"global\" || currentView === \"private\") &&\r\n        <footer id=\"footer_div\">\r\n          <input onInput={handleOnInput} type=\"text\" id=\"input_message\" placeholder=\"message...\" />\r\n          {currentView === \"global\" &&\r\n            <input type=\"submit\" onClick={sendPublicMessage} id=\"input_submit\" value=\"&#10148;\" />\r\n          }\r\n          {currentView === \"private\" &&\r\n            <input type=\"submit\" onClick={sendPrivateMessage} id=\"input_submit\" value=\"&#10148;\" />\r\n          }\r\n        </footer>\r\n      }\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default App;","C:\\Users\\Noefu\\Desktop\\Computacion_ubicua\\SPOC_3\\client\\src\\components\\PrivateChat.js",["35"],"import React from \"react\";\r\n\r\nfunction PrivateChat(props) {\r\n  return (\r\n    <div>\r\n      <div id=\"chat_container\">\r\n        {props.messageList.map((msg, key) => {\r\n          if (msg.from === props.currentChat && msg.to === props.username) {\r\n            return (\r\n              <div key={key} className='ur_text_message'>\r\n                <div className=\"text_message_header\">\r\n                  <p className=\"text_message_username\">{msg.from}</p>\r\n                  <p className=\"text_messagen_datetime\">{msg.datetime}</p>\r\n                </div>\r\n                <div className=\"text_message_content\"><p>{msg.text}</p></div>\r\n              </div>\r\n            );\r\n          } else if (msg.from === props.username && msg.to === props.currentChat) {\r\n            return (\r\n              <div key={key} className='my_text_message'>\r\n                <div className=\"text_message_header\">\r\n                  <p className=\"text_message_username\">{msg.from}</p>\r\n                  <p className=\"text_messagen_datetime\">{msg.datetime}</p>\r\n                </div>\r\n                <div className=\"text_message_content\"><p>{msg.text}</p></div>\r\n              </div>\r\n            );\r\n          } else\r\n            return;\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PrivateChat;","C:\\Users\\Noefu\\Desktop\\Computacion_ubicua\\SPOC_3\\client\\src\\components\\ConnectedUserList.js",[],"C:\\Users\\Noefu\\Desktop\\Computacion_ubicua\\SPOC_3\\client\\src\\components\\GlobalChat.js",[],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":2,"column":31,"nodeType":"42","messageId":"43","endLine":2,"endColumn":37},{"ruleId":"40","severity":1,"message":"44","line":8,"column":8,"nodeType":"42","messageId":"43","endLine":8,"endColumn":25},{"ruleId":"45","severity":1,"message":"46","line":130,"column":28,"nodeType":"47","messageId":"48","endLine":130,"endColumn":30},{"ruleId":"49","severity":1,"message":"50","line":142,"column":17,"nodeType":"51","messageId":"52","endLine":142,"endColumn":24},{"ruleId":"49","severity":1,"message":"50","line":29,"column":13,"nodeType":"51","messageId":"52","endLine":29,"endColumn":20},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'ConnectedUserList' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","no-global-assign","no-unsafe-negation"]